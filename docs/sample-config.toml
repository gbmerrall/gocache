# GoCache Sample Configuration File
# This file contains all available options with their default values.
# You can copy this file to gocache.toml and modify it to your needs.

[server]
# The port for the main caching proxy server.
proxy_port = 8080
# The port for the Control API server.
control_port = 8081
# The IP address to bind both servers to.
# For security, the Control API will only bind to localhost addresses.
bind_address = "127.0.0.1"

[cache]
# The default time-to-live for cached items (e.g., "30m", "1h", "24h").
default_ttl = "1h"
# The time-to-live for error responses (4xx/5xx status codes).
negative_ttl = "10s"
# The maximum size of the cache in megabytes.
max_size_mb = 500
# If true, GoCache will cache responses even if they have
# Cache-Control: no-cache or Pragma: no-cache headers.
ignore_no_cache = false
# A list of Content-Type values that are eligible for caching.
cacheable_types = [
    "text/html",
    "text/css",
    "application/javascript",
    "application/json",
    "text/plain"
]

[cache.post_cache]
# If true, enables caching for POST requests.
enable = false
# If true, the URL's query string will be included in the cache key calculation.
include_query_string = false
# The maximum size in megabytes for a POST request body to be eligible for caching.
max_request_body_size_mb = 10
# The maximum size in megabytes for a POST response body to be eligible for caching.
max_response_body_size_mb = 10

[logging]
# Application logs (for developers/debugging)
# The log level. Can be one of `debug`, `info`, `warn`, or `error`.
# Application logging is disabled by default (set to empty string).
level = ""
# The path to a log file. If empty, logs are written to standard output.
file = ""

# New logging configuration options
# Application log level. If empty, application logging is disabled.
app_level = ""
# Application log file path. If empty, no application logging to file.
app_logfile = ""

# Access logs (for operators/monitoring)
# Whether to write access logs to stdout. Auto-detected based on foreground/daemon mode.
access_to_stdout = true
# Access log file path. If empty, no access logging to file.
access_logfile = ""
# Access log format. Can be "human" (space-separated) or "json".
access_format = "human"

[persistence]
# If true, the cache will be saved to and loaded from disk.
enable = true
# The path to the file where the cache is persisted.
# Default: ~/.config/gocache/cache.gob
cache_file = ""
# How often the cache is automatically saved to disk (e.g., "5m", "1h").
auto_save_interval = "5m"

# =============================================================================
# ACCESS LOG FORMAT EXAMPLES
# =============================================================================
# 
# Human format (space-separated fields):
# 2025-08-18T14:30:45Z HIT 200 GET 1024 15 https://example.com/api/data application/json
# 2025-08-18T14:30:46Z MISS 404 GET 512 8 https://example.com/missing.html text/html
# 2025-08-18T14:30:47Z "" 201 POST 256 45 https://example.com/api/submit application/json
#
# Fields in order:
# 1. Timestamp (ISO8601 with second precision)
# 2. Cache Status (HIT, MISS, or "" for non-cacheable requests)
# 3. HTTP Status Code  
# 4. HTTP Method
# 5. Response Size (bytes)
# 6. Response Time (milliseconds)
# 7. Request URL
# 8. Content Type
#
# JSON format example:
# {"timestamp":"2025-08-18T14:30:45Z","cache_status":"HIT","status":200,"method":"GET","size":1024,"duration_ms":15,"url":"https://example.com/api/data","content_type":"application/json"}
#
# Notes:
# - Only GET requests are cached by default (POST can be enabled via post_cache.enable)
# - Non-cacheable requests (PUT, DELETE, HEAD, OPTIONS) show empty cache_status ("")
# - Process detection: access_to_stdout defaults to true in foreground, false in daemon mode
# - Async logging ensures proxy performance is not impacted by logging overhead
